import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'

project.version = "1.2.0"
project.group = 'com.github.codingchili.chili-game-ext'

subprojects {
    apply plugin: 'java'

    version = rootProject.version
    group = rootProject.group

    sourceCompatibility = 11
    targetCompatibility = 11

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    sourceSets {
        main {
            java {
                srcDir 'main/java'
            }
            resources {
                srcDir 'main/resources'
            }
        }
        test {
            java {
                srcDir 'test/java'
            }
            resources {
                srcDir 'test/resources'
            }
        }
    }

    repositories {
        mavenLocal()
        maven { url 'https://jitpack.io' }
        mavenCentral()
    }

    test {
        testLogging {
            exceptionFormat "full"
        }
        reports.html.enabled = false
    }
}

ext {
    polymerBin = Os.isFamily(Os.FAMILY_WINDOWS) ? 'polymer.cmd' : 'polymer'
    bowerBin = Os.isFamily(Os.FAMILY_WINDOWS) ? 'bower.cmd' : 'bower'
}

task polymer {
    doLast {
        exec {
            workingDir './prototype/website'
            commandLine = [bowerBin, 'install']
        }
        exec {
            workingDir './prototype/website'
            commandLine = [polymerBin, 'build']
        }
    }
    inputs.files(fileTree(dir: './prototype/website', include: '**/*', exclude: '/build/**'))
    outputs.dir('./prototype/website/build')
}

task archivePrototype(type: Zip, dependsOn: [subprojects.jar, polymer]) {
    archiveBaseName = 'prototype'

    into('/') {
        from('prototype/script') {
            fileMode = 0755
            include '**/*'
            expand(jar: jar.outputs.files[0].name, app: project.name, version: project.version)
        }
    }

    into('conf') {
        from fileTree('prototype/conf')
    }

    into('website') {
        from fileTree('prototype/website/build/default')
    }

    into('website/resources') {
        from fileTree('prototype/website/resources/')
    }

    into('/website') {
        from 'prototype/website/manifest.json', 'prototype/website/service_worker.json'
    }

    into('lib') {
        from(project(':common').configurations.compile)
        from(project(':services').configurations.compile)
        from(project(':common').jar)
        from(project(':services').subprojects.jar)
    }
}

task prototype(type: JavaExec, dependsOn: subprojects.classes) {
    workingDir = 'prototype'
    main = 'com.codingchili.core.Launcher'

    if (project.hasProperty('exec')) {
        args += exec
    } else {
        args += '--deploy'
    }

    subprojects.each {
        classpath += it.sourceSets.main.runtimeClasspath
    }
}

task alljavadoc(type: Javadoc) {
    source subprojects.collect { it.sourceSets.main.allJava }
    classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
}

task javadocJar(type: Jar, dependsOn: alljavadoc) {
    classifier = 'javadoc'
    from alljavadoc.destinationDir
}

task testReport(type: TestReport, dependsOn: 'build') {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn subprojects*.test
}

task archiveTestReport(type: Zip, dependsOn: testReport) {
    archiveBaseName = 'testreport'
    from fileTree(file("$buildDir/reports/allTests"))
}

javadoc.dependsOn javadocJar

artifacts {
    archives javadocJar
}